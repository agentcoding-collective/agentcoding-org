---
interface Props {
  title: string;
  content: string;
}

const { title, content } = Astro.props;
---

<section class="text-section relative min-h-screen flex items-center justify-center bg-white overflow-hidden">
  <!-- Subtle background pattern -->
  <div class="absolute inset-0 opacity-5">
    <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, rgb(0 0 0) 1px, transparent 0); background-size: 40px 40px;"></div>
  </div>
  
  <div class="relative z-10 max-w-5xl mx-auto px-6 py-20">
    <div class="text-content space-y-8">
      <!-- Title with gradient underline -->
      <div class="space-y-4">
        <h2 class="text-5xl md:text-6xl font-bold text-gray-900 leading-tight">
          {title}
        </h2>
        <div class="w-24 h-1 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full"></div>
      </div>
      
      <!-- Content in a card with shadow -->
      <div class="bg-gradient-to-br from-gray-50 to-white p-8 md:p-12 rounded-3xl shadow-xl border border-gray-100">
        <p class="text-xl md:text-2xl text-gray-700 leading-relaxed font-light">
          {content}
        </p>
      </div>
    </div>
  </div>
</section>

<style>
  /* Parallax effect for text content */
  .text-content {
    transform: translateY(0);
    opacity: 1;
    transition: all 0.3s ease-out;
  }
</style>

<script>
  // Intersection Observer for fade-in animation
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, { threshold: 0.1 });
  
  const textContent = document.querySelector('.text-content');
  if (textContent) {
    observer.observe(textContent);
  }
  
  // Subtle parallax on scroll
  window.addEventListener('scroll', () => {
    const section = document.querySelector('.text-section') as HTMLElement;
    const content = document.querySelector('.text-content') as HTMLElement;
    
    if (section && content) {
      const rect = section.getBoundingClientRect();
      const scrollProgress = Math.max(0, Math.min(1, (window.innerHeight - rect.top) / window.innerHeight));
      const translateY = (1 - scrollProgress) * 50;
      content.style.transform = `translateY(${translateY}px)`;
    }
  });
</script>
